$ rails g model Products name:string description:text pricing:float
$ rake db:migrate
- add seed values for Products in db/seeds.rb
$ rake db:seed
- update product model: add validations
$ rails g model Categories name:string
$ rake db:migrate
- add seed values for Categories in db/seeds.rb
$ rake db:seed
$ rails g migration AddCategoryRefToProducts category:references (adds category_id to products)
$ rake db:migrate
- update product model: add belongs to 

~~~~~~~~~~~~ queries ~~~~~~~~~~~~
> Product.where("id >= ? and id <= ?", 1,3)
SELECT "products".* FROM "products"  WHERE (id >= 1 and id <= 3)

# update_all
> Product.where("id >= ? and id <= ?", 1,3).update_all(category_id: 3)
> Product.where("id >= ? and id <= ?", 1,3).update_all "category_id = 3"  # SET wrapped in string
 UPDATE "products" SET "category_id" = 3 WHERE (id >= 1 and id <= 3)
> Product.where(id: 4..6).update_all(category_id: 1)
UPDATE "products" SET "category_id" = 1 WHERE ("products"."id" BETWEEN 4 AND 6)


~~~ IN ~~~
> Product.find([1,3]) 
> Product.where(id: [1,3])
SELECT "products".* FROM "products"  WHERE "products"."id" IN (1, 3)

~~~ LIMIT ~~~
> Product.take(2)
SELECT  "products".* FROM "products"  LIMIT 2

> Product.first(3)
SELECT  "products".* FROM "products"   ORDER BY "products"."id" ASC LIMIT 3

> Product.last(3)
SELECT  "products".* FROM "products"   ORDER BY "products"."id" DESC LIMIT 3

> Product.order(:name).first
SELECT  "products".* FROM "products"   ORDER BY "products"."name" ASC LIMIT 1

> Product.find_by name: 'hose'         # find_by returns first matching record
> Product.where(name: 'hose').take     # where returns array. take limits to 1 record
SELECT  "products".* FROM "products"  WHERE "products"."name" = 'hose' LIMIT 1

~~~ BETWEEN ~~~
> Product.where(created_at: '2016-08-19' .. '2016-08-20').select("created_at")
SELECT "products"."created_at" FROM "products"  WHERE ("products"."created_at" BETWEEN '2016-08-19' AND '2016-08-20')

~~~ not ~~~
> Product.where.not(category_id: 3)
SELECT "products".* FROM "products"  WHERE ("products"."category_id" != 3)
> Product.where.not(category_id: [1,3])
SELECT "products".* FROM "products"  WHERE ("products"."category_id" NOT IN (1, 3))

~~~ order ~~~
> Product.order(:created_at)
> Product.order(created_at: :asc)
SELECT "products".* FROM "products"   ORDER BY "products"."created_at" ASC

> Product.order(created_at: :desc)
SELECT "products".* FROM "products"   ORDER BY "products"."created_at" DESC

> Product.order(created_at: :asc, category_id: :desc).select("id, created_at, category_id")
SELECT id, created_at, category_id FROM "products"   ORDER BY "products"."created_at" ASC, "products"."category_id" DESC

~~~ distinct ~~~
> Product.select(:name).distinct
SELECT DISTINCT "products"."name" FROM "products"

~~~ LIMIT AND OFFSET ~~~
> Product.limit(5).offset(2)
SELECT  "products".* FROM "products"  LIMIT 5 OFFSET 2

~~~ GROUP BY ~~~
> Product.select("category_id, sum(pricing) as 'category_price'").group("category_id")
SELECT category_id, sum(pricing) as 'category_price' FROM "products"  GROUP BY category_id

> Product.select("date(created_at) as created_date, COUNT(1)").group("date(created_at)")
SELECT date(created_at) as created_date, COUNT(1) FROM "products"  GROUP BY date(created_at)

> Product.group("date(created_at)").count
SELECT COUNT(*) AS count_all, date(created_at) AS date_created_at FROM "products"  GROUP BY date(created_at)


~~~ HAVING ~~~
> Product.select("category_id, sum(pricing) as 'category_price'").group("category_id").having("sum(pricing) > 100")
SELECT category_id, sum(pricing) as 'category_price' FROM "products"  GROUP BY category_id HAVING sum(pricing) > 100


~~~ joins ~~~
> Product.joins("inner join categories on categories.id = products.category_id").select("*")
SELECT * FROM "products" inner join categories on categories.id = products.category_id
> Category.joins(:products)
SELECT "categories".* FROM "categories" INNER JOIN "products" ON "products"."category_id" = "categories"."id"
> Product.joins(:category)
SELECT "products".* FROM "products" INNER JOIN "categories" ON "categories"."id" = "products"."category_id"

~~~ ids ~~~
> Product.ids
SELECT "products"."id" FROM "products"

~~~ exists ~~~
> Product.exists?(name: "hose")
SELECT  1 AS one FROM "products"  WHERE "products"."name" = 'hose' LIMIT 1
> Product.where(name: "hoses").exists?
SELECT  1 AS one FROM "products"  WHERE "products"."name" = 'hoses' LIMIT 1
> Secret.find(3).likes.exists?(user_id: 9)
  Like Exists (0.6ms)  SELECT  1 AS one FROM "likes"  WHERE "likes"."secret_id" = $1 AND "likes"."user_id" = 9 LIMIT 1  [["secret_id", 3]]
=> true


~~~ minimum, maximum, average ~~~
> Product.minimum("pricing")
SELECT MIN("products"."pricing") AS min_id FROM "products"
=> 7.99
> Product.maximum("pricing")
SELECT MAX("products"."pricing") AS max_id FROM "products"
=> 2888.99
> Product.sum("pricing")
SELECT SUM("products"."pricing") AS sum_id FROM "products"
=> 5316.709999999999
> Product.average("pricing")
SELECT AVG("products"."pricing") AS avg_id FROM "products"


~~~ show tables ~~~
> ActiveRecord::Base.connection.tables

~~~ explain ~~~
> Product.where(id: 1).joins(:category).explain
SELECT "products".* FROM "products" INNER JOIN "categories" ON "categories"."id" = "products"."category_id" WHERE "products"."id" = 1
EXPLAIN for: SELECT "products".* FROM "products" INNER JOIN "categories" ON "categories"."id" = "products"."category_id" WHERE "products"."id" = 1


~~~ drop database ~~~
$ rake db:drop
$ rake db:drop db:create db:migrate
# If you have data in other tables you don't want to lose, open the database console and drop the posts table manually:
$ rails db
# drop table posts;

~~~ bring schema down by version ~~~
You deleted the file but the ID is still in the schema table.
Just Log into mysql
SELECT * FROM schema_migrations; *- take note of the version_id*
Then
DELETE FROM schema_migrations WHERE VERSION = version_id; 
Then logout and verify
rake db:migrate:status migration files ~~~

