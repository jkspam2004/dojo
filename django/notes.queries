# /blog/models.py
from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):              # __unicode__ on Python 2
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=50)
    email = models.EmailField()

    def __str__(self):              # __unicode__ on Python 2
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog)  # an entry belongs to a blog, but a blog can have many entries
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author) # entry can be written by multiple authors, authors can have multiple entries
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):              # __unicode__ on Python 2
        return self.headline


~~~~ insert a row. /blog/views.py
>>> from blog.models import Blog
>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
>>> b.save() # inserts when save is called, no return value

~~~~ To create and save an object in a single step, use the create() method.
>>> Blog.objects.create(name='Beatles Blog', tagline='All the latest Beatles news.')

~~~~ update a row
>>> b5.name = 'New name'
>>> b5.save()

~~~~ updating foreign key. one-to-many. use save()
>>> from blog.models import Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog # entry belongs to blog
>>> entry.save()

~~~~ updating many-to-many. use add()
>>> from blog.models import Author
>>> joe = Author.objects.create(name="Joe")
>>> entry.authors.add(joe)

~~~~ updating multiple rows for many-to-many. use add()
>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> george = Author.objects.create(name="George")
>>> ringo = Author.objects.create(name="Ringo")
>>> entry.authors.add(john, paul, george, ringo)

"""
To retrieve objects from your database, construct a QuerySet via a Manager on your model class.
A QuerySet represents a collection of objects from your database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT.
"""

>>> Blog.objects
<django.db.models.manager.Manager object at ...>

* Managers are accessible only via model classes ^, rather than from model instances like below.

>>> b = Blog(name='Foo', tagline='Bar')
>>> b.objects # wrong


* The Manager is the main source of QuerySets for a model. For example, Blog.objects.all() returns a QuerySet that contains all Blog objects in the database.

~~~~ retrieving all objects
>>> all_entries = Entry.objects.all()

~~~~ retrieving one object with get(). one object only not QuerySet
>>> one_entry = Entry.objects.get(pk=1)

* filter() will always give you a QuerySet, even if only a single object matches the query

~~~~ get a QuerySet of blog entries from the year 2006
>>> Entry.objects.filter(pub_date__year=2006)
With the default manager class, it is the same as:
>>> Entry.objects.all().filter(pub_date__year=2006)

~~~~ chaining filters
#  all entries with a headline that starts with “What”, that were published between January 30, 2005, and the current day.
>>> Entry.objects.filter(
        headline__startswith='What'
    ).exclude(
        pub_date__gte=datetime.date.today()
    ).filter(
        pub_date__gte=datetime(2005, 1, 30)
    )

~~~~ add multiple arguments to function if it's the same type of query
# all users younger than 70 AND whose first name starts with "S"
>>> user = User.objects.filter(age__lt=70, first_name__startswith="S")
# users who are younger than 70 OR whose first_name starts with "S", you can use | (the set union operator):
>>> user = User.objects.filter(age__lt=70)|User.objects.filter(first_name__startswith="S")

~~~~ following relationships "backwards" with foo_set
>>> b = Blog.objects.get(id=1)
>>> b.entry_set.all() # Returns all Entry objects related to Blog.

# b.entry_set is a Manager that returns QuerySets.
>>> b.entry_set.filter(headline__contains='Lennon')
>>> b.entry_set.count()

~~~~ query sets are unique.  each refinement creates a separate and distinct QuerySet
>>> q1 = Entry.objects.filter(headline__startswith="What")
>>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
>>> q3 = q1.filter(pub_date__gte=datetime.date.today())

The first is a base QuerySet containing all entries that contain a headline starting with “What”. Th
The second is a subset of the first, with an additional criteria that excludes records whose pub_date is today or in the future. 
The third is a subset of the first, with an additional criteria that selects only the records whose pub_date is today or in the future. 
q1 unaffected by refinement

~~~~ limiting sets
# first 5 objects (LIMIT 5):
>>> Entry.objects.all()[:5]
# sixth through tenth objects (OFFSET 5 LIMIT 5):
>>> Entry.objects.all()[5:10]

~~~~ limit 1
# SELECT * FROM entries ORDER BY headline LIMIT 1 
>>> Entry.objects.order_by('headline')[0]  # IndexError if no object 
This is roughly equivalent to:
>>> Entry.objects.order_by('headline')[0:1].get() # DoesNotExist if no object

~~~~ field lookups
form: field__lookuptype=value. (That’s a double-underscore). F

>>> Entry.objects.filter(pub_date__lte='2006-01-01')
translates (roughly) into the following SQL:
SELECT * FROM blog_entry WHERE pub_date <= '2006-01-01';

"""
The field specified in a lookup has to be the name of a model field. There’s one exception though, in case of a ForeignKey you can specify the field name suffixed with _id. In this case, the value parameter is expected to contain the raw value of the foreign model’s primary key. For example:

>>> Entry.objects.filter(blog_id=4)
"""

~~~~ exact match
>>> Entry.objects.get(headline__exact="Cat bites dog")
SELECT ... WHERE headline = 'Cat bites dog';

>>> Blog.objects.get(id__exact=14)  # Explicit form
>>> Blog.objects.get(id=14)         # __exact is implied


~~~ iexact
A case-insensitive match.
>>> Blog.objects.get(name__iexact="beatles blog")
Would match a Blog titled "Beatles Blog", "beatles blog", or even "BeAtlES blOG".

~~~~ contains
Case-sensitive containment test.
>>> Entry.objects.get(headline__contains='Lennon')
SELECT ... WHERE headline LIKE '%Lennon%';
Note this will match the headline 'Today Lennon honored' but not 'today lennon honored'.

~~~~ icontains
Case-insensitive containment test.

~~~~ startswith, endswith (case sensitive)
~~~~ istartswith, iendswith

~~~~ raw sql
entries = Entry.objects.raw("SELECT * FROM <my_app_name_model_name>")
formmat: app_name + _ + lowercase_model_name. 
get the table/model name: User._meta.db_table

~~~~ importing app from different project
import sys
sys.path.append('/root/project1')
from appx.models import ClassFoo

~~~~ delete tables
A. Delete all tables
>>> manage.py sqlclear  # will print the sql statement to drop all tables

B. delete all data in all tables
>>> manage.py flush # returns the database to the state it was in immediately after syncdb was executed

C. Create all tables as defined in the model?
>>> manage.py syncdb # Creates the database tables for all apps in INSTALLED_APPS whose tables have not already been created.

>>> Blogs.objects.delete()

~~~~ limit columns returned
# values() returns a dictionaries
>>> Blogs.objects.filter(year__exact="2017").values("title", "<column2>")

# values_list() returns a tuples
>>> Blogs.objects.filter(year__exact="2017").values("title", "<column2>")

~~~~ more example schemas:
https://docs.djangoproject.com/en/1.9/topics/db/queries/
https://docs.djangoproject.com/en/1.9/topics/db/models/


~~~~~ ManyToManyField requires a positional argument: the class to which the model is related.
For example, if a Pizza has multiple Topping objects – that is, a Topping can be on multiple pizzas and each Pizza has multiple toppings – here’s how you’d represent that:

from django.db import models

class Topping(models.Model):
    # ...
    pass

class Pizza(models.Model):
    # ...
    toppings = models.ManyToManyField(Topping)

ManyToManyField instances should go in the object that’s going to be edited on a form. In the above example, toppings is in Pizza (rather than Topping having a pizzas ManyToManyField ) because it’s more natural to think about a pizza having toppings than a topping being on multiple pizzas. The way it’s set up above, the Pizza form would let users select the toppings.

~~~~~ Many-to-one relationships
For example, if a Car model has a Manufacturer – that is, a Manufacturer makes multiple cars but each Car only has one Manufacturer – use the following definitions:

from django.db import models

class Manufacturer(models.Model):
    # ...
    pass

class Car(models.Model):
    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
    # ...
